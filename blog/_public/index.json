[{"content":"We all have heroes we look up to when we are kids, right? Ever since I was pretty young, I used to look up to other developers and wonder when will I get to do all these amazing things they do. Then I grew up, became a software engineer, and I\u0026rsquo;m already doing things that they do. But I genuinely feel there are certain things missing. In this post, I\u0026rsquo;m just brainstorming my thoughts on this.\nMore of a Person, than a Developer. I have always had a vision to own a website someday and keep posting about the crazy things that I experiment (which now I don\u0026rsquo;t because of my heavy schedule with work). I wanted this website to reflect the kind of developer I am. I believe every developer or a tech enthusiast in general is unique in their action plans, their ethics, their vision for the future. I have my own vision and I believe I\u0026rsquo;ll get there someday. But, that\u0026rsquo;s not just the only side to me.\nIn the pursuit of becoming more of a developer, I ignored the other sides of me that adds value to my life in some other way. I\u0026rsquo;m a musician who loves to compose music in my leisure. An art enthusiast who loves to look at art, pause and ponder about the intent of the artist. I\u0026rsquo;m a travel freak who loves to travel to different places, meet new people and absorb their culture. I\u0026rsquo;m also a bibliophile who loves the scent of the book as I open them and read. All of these things add up to making me as a Person.\nWhat is (my) Person? A person, according to me, is a Quest. It\u0026rsquo;s a perpetual quest to understand the world, understand self and absorb the culture, perpetuate life in this ever-changing world. If I had to bluntly categorize the things around me in terms of metrics, I would categorize things into two distinct categories, things that can be quantified and things that can\u0026rsquo;t be quantified. You could easily quantify your finances with currency and richness in terms of money you make. This quantification give you a distinct measure of where you stand in the society (If you are into such measurements).\nHowever, there are certain things that you can\u0026rsquo;t quantify. Happiness, Friendship, Love to name a few. These don\u0026rsquo;t have quantification since they are subjective measures. We can not objectively decide how to measure love, friendships. Since they are immeasurable, there is a certain mystery around them, and it leaves us room to be poetic, prophetic or romantic around them. This is the kind of mystery that adds color to my life, since it keeps me going to understand those mysteries better. Questioning these mysteries leads me to ever more profound answers that makes the process more interesting.\nClosing Thoughts All these unquantifiable mysteries adds up to my quest to be more of a person. Lately I had been living the life of a just-developer and when I see it now, it feels a lot two-dimentional. My personhood, that adds more depth to this two-dimensional lifestyle, had been missing all along.\nTherefore, I would spend my time making music, involve and lose myself in art, involve myself in gardening (not yet sure though), and also just be more of a happier person overall. I would reflect this attitude over to my online handles and try to involve with diverse people doing diverse stuff and try to learn as much as possible from everyone. Being a developer is a just a side to me among a lot of other sides that I have. Acknowledging this fact will help me live a fuller life, I believe :)\nGood day.\n","permalink":"https://0xv31an5a1i5.xyz/posts/i-realized-being-a-developer-is-not-enough/","summary":"We all have heroes we look up to when we are kids, right? Ever since I was pretty young, I used to look up to other developers and wonder when will I get to do all these amazing things they do. Then I grew up, became a software engineer, and I\u0026rsquo;m already doing things that they do. But I genuinely feel there are certain things missing. In this post, I\u0026rsquo;m just brainstorming my thoughts on this.","title":"I realized being developer is not enough"},{"content":"When I first bought a Kindle device, it seemed like this tech was a game changer. it still does (to some degree of course). One device to satisfy all of my book-reading needs. I was essentially carrying an entire library on my backpack. I literally had to save money to buy a kindle back then since I was in college. But it was worth it. And since, I had put so much effort into buying the kindle, that added an extra layer of attachment. I thought this is the best thing an avid bibiliophile can ask for.\nFew days ago I revisited my bookshelf, took off some old paperbacks and turned some pages around. And I kid you not, I can\u0026rsquo;t tell you how much I had missed that old, coal firey kind of smell welcoming me when I started reading something. That made me wonder, was my switch to Kindle really worth it?\nWhy switch to Kindle? Well, no kidding, I love the smell of paperbacks. And I haven\u0026rsquo;t seen anybody else who doesn\u0026rsquo;t, so I think I won\u0026rsquo;t be judged. The first thing I do before reading a book is smell it. However when I was out, I used to carry my books around and that added an extra layer of luggage and sometimes when books were thick af, carrying them in hand was extremely inconvenient.\nI try to keep my belongings as minimal as possible so that I can have a convenient life in as little as possible. All those things obviously points towards buying an eBook reader and there isn\u0026rsquo;t an eBook reader which is as cheap and as efficient as a Kindle (Sorry Kobo, No hard feelings now, after two years). So as much as I hate to be in an ecosystem, I thought this was a good tradeoff to make between convenience of reading ebooks and a little bit of Amazon ecosystem.\nBack to Paper\u0026rsquo;back\u0026rsquo;?? Yes. While I was too involved reading books in the eBook reader to accomodate as little of anything possible, I underestimated the experience Paperbacks have to offer! I remember when I was too much into Paperbacks, I used to spend my time organizing my shelf, going through the highlights, reading the notes and much more. But with the eBook reader, all those happen automagically in the software.\nI have understood that no matter how much technology evolves to accomodate and represent real world entities in software, there are certainly losses we suffer which we get used to given enough time. That doesn\u0026rsquo;t necessarily mean, the technology has just made our lives easier by reducing and easing out complex tasks. Sometimes there is some amount of joy and fun getting involved in that complexity. It\u0026rsquo;s upto us to figure out where we would rather lead to.\nAnd there are certainly pressing (philosphical, kinda) questions such as, \u0026ldquo;Technology has the capability to make impossible, possible. And amidst this endless ocean of opportuunities, are we really making our lives better or worse? If we can make our lives better, how?\u0026rdquo; These are the kind of questions I ponder with. And this organic feeling of Paperbacks have made me realize that not all digital technology touches lives, they just make it convenient and easier.\n","permalink":"https://0xv31an5a1i5.xyz/posts/rekindling-my-relationship-with-paperbacks/","summary":"When I first bought a Kindle device, it seemed like this tech was a game changer. it still does (to some degree of course). One device to satisfy all of my book-reading needs. I was essentially carrying an entire library on my backpack. I literally had to save money to buy a kindle back then since I was in college. But it was worth it. And since, I had put so much effort into buying the kindle, that added an extra layer of attachment.","title":"Re-kindling My Relationship With Paperbacks"},{"content":"Last weekend, my mum and I were going through the old photo albums and archive of old times that were stashed in the cupboard. My mum held onto a piece of paper that was unnaturally torn and withered in nature. However, she held onto it as if it was very valuable to her, and it brought a smile to her face. And of course it was. It was a letter written by my dad while he was away for work.\nBack in 1997-98, when I was a small boy, my dad used to stay far away from us for work. He has been away working for years. Yet, he sent so many letters which would take months to reach home. Even though those letters are so many years old, they still hold so much value to my mum. That made me wonder, why doesn’t that happen to us when we send messages across? If technology was supposed to bring people together, why doesn’t it evoke the same feelings as those not-so-techy letters?\nSo I started to think deeply about it and decided that I would write about the things I brainstorm. Guess it\u0026rsquo;s going to be a long explainer. So brace yourself :)\nCorrelation between efforts and value Naturally, any tangible or intangible asset gains value when the reproducibility of it is difficult or expensive. For example, Gold has value because there is only a finite amount of it in this world and the reproducibility of this asset is extremely expensive. You can apply this logic to anything, and it would still fit.\nApplying the same logic to the letters, it turns out that writing a letter is a time intensive process. The farther the person is, the more time it would take in the delivery of the letter. So, you would also have to compensate for that buffer time in advance. All in all, there is a significant amount of time and brain work involved in writing/posting the letters. And that buffer and efforts involved, give those letters a certain value. When you are the recipient, you know that the person who wrote it, has put a significant amount of efforts into them and that makes them valuable because they are not as easy to reproduce.\nThe intermediaries of communication, (in this case the letters) play a significant role in deciding how our human to human relationships are cherished and experienced. In other words, the intermediaries of communication IRL influence human relationships.\nFast-forward two decades It’s 2022 and the technology has engulfed the entire world. Why write letters when you can type something and send it to any corner of the world in just a matter of seconds! You don’t have to put efforts into writing the letter, writing the address, posting it. All this long and effort-invoving tasks are a thing of the past now.\nHowever, just think for a moment.\nDid we actually lose that special feeling that the intermediaries of communications provide when we evolved to use better technology with time? In my opinion, we sure have.\nWas it really worth it? I’m not really sure.\nIs there a better way? There should be. That’s what we humans are good at. We figure out a way to solve the problem better than any other organism in this entire world. (Unless you are a bot who is reading this)\nBut I think now we are locked-in with this trend, and it’s going to be very hard to change or refine (if it requires change or refinement) this system since the entirety of the population is dependent on it.\nClosing Thoughts I’m not criticizing the evolution of technology here. I know the evolution is perpetual, and technological evolution seems like an obvious way to move forward. However, we might have collectively chosen a path forward too quickly.\nI’m by no means an expert in this field. If my take on this topic is blunt, consider me irrelevant. But I really do miss the special feeling of writing those letters. I have written letters before, and I still have the letters that I have received from my loved one’s. But I haven’t had the impulse to store the messages, just like I have done with letters. They don’t make me feel as special as letters do. That makes me suspect that we evolved too quickly with technology and these constructs of modern messaging and communication are locked in with our day-to-day life.\nWe sure are losing a special touch of human to human communications with the new constructs, and there should be a better way of building these blocks of communications. The one’s that actually makes you feel special the way letters do. I’m not sure if it’s possible sometime in the future, or if my take on this topic is blatant or nonsensical. But as a technophile / technologist, all I can do is hope for a better future.\nHave a good day :)\n","permalink":"https://0xv31an5a1i5.xyz/posts/the-technology-evolved-too-fast/","summary":"Last weekend, my mum and I were going through the old photo albums and archive of old times that were stashed in the cupboard. My mum held onto a piece of paper that was unnaturally torn and withered in nature. However, she held onto it as if it was very valuable to her, and it brought a smile to her face. And of course it was. It was a letter written by my dad while he was away for work.","title":"Maybe, The Technology Evolved Too Fast"},{"content":"Ah, January! The month where we make so many new year resolutions in the beginning just to realize we were not able to hold onto any of those as days pass by. Jokes apart! I did make resolutions this time, and I think I was able to hold onto some of those. Given the fact that I\u0026rsquo;m worse at keeping the resolutions that I made to myself, I\u0026rsquo;m off to a good start (I think).\nNew Blog, New Promises! Earlier I used Ghost to upload all my blog posts and My Ghost met with a disaster! Yeah, that was my mistake though because I forgot to make backups! (neglected could be the right word, but meh!). Anyway, we learn from our mistakes, I sure did. So I bounced back to Hugo instead.\nMe and Hugo have got this complicated relationship. I move away from Hugo just to come back to it after a few months! And I think you start to realize how much you loved something only when you are away. So Hugo, I\u0026rsquo;m back! (And hopefully I\u0026rsquo;ll stay, please don\u0026rsquo;t mind). I\u0026rsquo;m back using Hugo to render my static website and the content is backed up over codeberg. So the first thing I did this month was to get my website sorted. And sure it did!\nFediverse and lhin.space Among all my projects, maintaining Legohouse in Space aka. lhin.space has been my favorite. Never in my life ever I had the chance to have immense control over my ecosystem while giving others an option to have the same liberty to share the same space. I love fediverse and I truly believe this is going to give people freedom and add value to their life.\nSo This month lhin.space saw two major updates\n Pixelfed (pixelfed.lhin.space) was updated to version 0.11.2 Dendrite (chat.lhin.space) was updated to version 0.6  This has been fun and I hope to continue maintaining these for years to come :)\nNext Month? I\u0026rsquo;m planning to add more sections to this website namely \u0026ldquo;uses\u0026rdquo; (where I write about the tools I use to manage my life) and \u0026ldquo;elsewhere\u0026rdquo; (where I write about my contact details). And also get my website listed under 512Kb Club.\nSince I don\u0026rsquo;t plan my month ahead, I\u0026rsquo;m not really sure how it goes. Hopefully it stays productive. Good day :)\n","permalink":"https://0xv31an5a1i5.xyz/posts/monthly-review-jan-2022/","summary":"Ah, January! The month where we make so many new year resolutions in the beginning just to realize we were not able to hold onto any of those as days pass by. Jokes apart! I did make resolutions this time, and I think I was able to hold onto some of those. Given the fact that I\u0026rsquo;m worse at keeping the resolutions that I made to myself, I\u0026rsquo;m off to a good start (I think).","title":"Monthly Review: Jan 2022"},{"content":"\u0026ldquo;Leave this ecosystem? No way! Why should I leave it when they are providing everything for free and it\u0026rsquo;s so convenient when everything is just there when you want it!\u0026rdquo; Yep! This is me approximately one year ago when I was heavily tied into the Google Ecosystem and I had been totally involved in all aspects inside this Ecosystem for five to six years straight. And it took me couple of months to actually explore the internet and discover why it was a bad idea. It\u0026rsquo;s very easy to say that any service on the internet is convenient because it makes your life so easier. However, every convenience comes with a cost. In here, your freedom of choice and your privacy is at stake!\nThe Problem I didn\u0026rsquo;t find the idea of moving out of my ecosystem was considerable because my Ecosystem seemed like my \u0026lsquo;Eden Garden\u0026rsquo; where everything I wanted to do was in my hand\u0026rsquo;s reach. Want to store and retrieve photos easily? Use Google Photos. Want to store your documents? Use Google Drive. Want to edit those documents? Use Google docs. Want to add your photos to those documents? Google photos is integrated with Google docs. It\u0026rsquo;s as if the your Ecosystem knows what you want to do even before you even think of doing it. This nature of an Ecosystem poses us with two big problems.\n Privacy : Your Ecosystem knows a lot about you already to understand what you would possibly want to do (Only if it\u0026rsquo;s collecting your data which is what most of the ecosystems do). Restriction : Your Ecosystem confines you inside its walls restricting you from even thinking about migrating from your services because if you do, you may have to give up some of that convenience. And it\u0026rsquo;s gonna take a lot of time to unhook the hooks the ecosystem puts on you.  Privacy in an Ecosystem is a bigger discussion in itself. I want to specifically talk about the second one where it confines you inside its walls, which had happened to me. Convenience is like a drug (to put it bluntly). And even if I had known that my ecosystem tracks me 24/7, I was reluctant to give away my convenience. When you are heavily tied into an Ecosystem, you stop looking for other services which are clearly better because whatever your Ecosystem provides is the one that would work best for you in the current state and even if it\u0026rsquo;s something crappy and something you didn\u0026rsquo;t like, you would have to live with it. This is how the Ecosystem suppresses your freedom of choice by making you enslaved for what you are being provided, not for what you have demanded. That is basically monopolistic nature put into digital media.\nThe Realization Last year, I chose to read \u0026lsquo;Permanent record\u0026rsquo; by Edward Snowden. It really changed my outlook and it made me question my online presence. It was really implicative when I looked back at my \u0026ldquo;Ecosystematical\u0026rdquo; lifestyle and how much I was missing out on the true essence of what makes the internet special. And, I decided I would migrate my data to those services that are clearly better and explore the wide world out there. And the journey was painfully slow because I had an archive of 50+ GB\u0026rsquo;s of photos in Google Photos and most of my documents were backed up in Google Drive.\nThe Takeout Process Google has a takeout program where you can select all of your data and then request for a copy. Google then aggregates your data and then compresses them down to a zip file. You\u0026rsquo;ll get an email in your gmail inbox. Then you can download your data through the link. Easy right? No!!\nWhat Google does, is it lets you choose how big of a data chunk you want to download. Say you have an archive of 20GB, you can download it in two chunks of 10GB each or 10 chunks of 2GB each. And those downloads will fail if your internet connection drops down certain threshold. Then you need to retry. If it fails more than 3 times, you need to request for the data again. Most of the people would give up here and choose to spend some more time in this ecosystem until they try again and the cycle repeats.\nI had to request for my data thrice and I still couldn\u0026rsquo;t download all my data. And the only inconvinient process around the whole ecosystem was the takeout process. I don\u0026rsquo;t know if it was done deliberately, but I had to let go of my 50GB+ of archive which had very important documents and photos. My Eden Garden was punishing me when I decided to move away from it.\nThe Solution The solution is to move towards open source projects or towards the services that focus on your privacy. When any service focuses on your privacy, it just means they value you as an end user. Internet means Freedom. So, you should be the one who own your free will to navigate around and call yourself at home. It sure takes a lot of trial and errors to make yourself comfortable by finding a balance between convenicence and digital privacy. But it\u0026rsquo;s gonna be worth it. The more private you go, less convinient your experience will be. However, there are so many alternatives on the world wide web which is enough for you to build your own convenient ecosystem.\nYou might want to look at NextCloud Project which is a self hosted cloud solution which has plugins for any use case that you might have.\nIf you want to start self hosting cheap and best, you might want to look at Raspberry Pi Project which is a credit card sized computer which can be used to host your self hosted setup which can be scaled further in future. The possibilities are endless.\nSo, Instead of living in someone else\u0026rsquo;s Eden Garden where you live in their terms, why don\u0026rsquo;t you make your own Garden and live by your terms. Isn\u0026rsquo;t that what freedom tastes like?\n","permalink":"https://0xv31an5a1i5.xyz/posts/ecosystem-incarceration/","summary":"\u0026ldquo;Leave this ecosystem? No way! Why should I leave it when they are providing everything for free and it\u0026rsquo;s so convenient when everything is just there when you want it!\u0026rdquo; Yep! This is me approximately one year ago when I was heavily tied into the Google Ecosystem and I had been totally involved in all aspects inside this Ecosystem for five to six years straight. And it took me couple of months to actually explore the internet and discover why it was a bad idea.","title":"Ecosystematic Walls of Incarceration "},{"content":"I have been using Koa.js for a while now and it turns out to be great. I’m having a lot of fun playing around with it since its simple and configurable. And I was searching for a ground up way to execute file uploads so that I can tweak its functionality however I want to. And it turns out, It’s not as difficult as I thought. Before going forward, I’m assuming you have a basic knowledge of how to setup basic Koa.js server with routers since it’s being covered in so many articles. So I’ll be skipping the server setup with routers. Click here if you want to go through an article that covers the same. So, Lets get coding. 😉\nServer Page : app.js // app.js const Koa = require(\u0026#34;koa\u0026#34;); const koaBody = require(\u0026#34;koa-body\u0026#34;); const logger = require(\u0026#34;koa-logger\u0026#34;); const router = require(\u0026#34;./router\u0026#34;); const app = new Koa(); app.use(koaBody( { multipart: true } )); app.use(logger()); app.use(router.routes()).use(router.allowedMethods()); app.listen(3000, () =\u0026gt; { console.log(\u0026#34;Listening at 3000\u0026#34;); }); The above app.js file starts up the server and starts listening in port 3000 for requests. Simple stuff, nothing fancy. But things to be noted are the koa-body module and { multipart : true } option. This part is really important, since koa-body parses the request body and populates Koa ctx object based on the form data being sent. When a file is being sent from the front-end, koa-body parses the request and the uploaded file attributes will be available under ctx.request.files which we can then access across Koa server to implement file upload functionality\nRouter and Upload Logic : Router.js Well, Its not a good practice to add the server logic under router.js file since router is only used for routing the requests. You will have a controller file to take care of the logic when the request is being routed from router. But for the course of this tutorial, I have written the logic in the router itself.\nIn this part, you will need a package called promisepipe which I’ll explain in a second. For now, install the package by running the following command. And create a folder named uploads in the root of the project which will hold uploaded images.\nnpm install promisepipe // router.js const Koa = require(\u0026#34;koa\u0026#34;); const Router = require(\u0026#34;koa-router\u0026#34;); const promisePipe = require(\u0026#34;promisepipe\u0026#34;); const fs = require(\u0026#34;fs\u0026#34;); const path = require(\u0026#34;path\u0026#34;); const router = new Router(); router.get(\u0026#34;/\u0026#34;, (context, next) =\u0026gt; { context.body = \u0026#34;Hey\u0026#34;; }); router.post(\u0026#34;/upload\u0026#34;, async (context, next) { try { const uploadfile = context.request.files.file; const savefile = `${Date.now()}#${uploadfile.name}`; const readStream = fs.createReadStream(uploadfile.path); const writeStream = fs.createWriteStream(path.join(\u0026#34;uploads\u0026#34;, savefile)); await promisePipe( readStream.on(\u0026#34;error\u0026#34;, () =\u0026gt; { throw new Error({ errors: \u0026#34;File Read Error\u0026#34; }); }), writeStream.on(\u0026#34;error\u0026#34;, () =\u0026gt; { throw new Error({ errors: \u0026#34;Write Error\u0026#34; }); }) ); context.body = { message: \u0026#34;File Uploaded\u0026#34; }; } catch (err) { console.log(err); context.body = { message: \u0026#34;There was an error\u0026#34;, errors: err }; } }); module.exports = router; The Upload Logic Anything that is written in the bold letters in router.js is important and I’ll be explaining the mode of execution one by one.\n  /upload : This is the POST route handler that contains the logic of what needs to be done when the front-end makes an upload request with a file attached to its body. When the URL is hit, the function gets executed.\n  uploadfile : File attributes from parsed context.request.files.file in uploadfile stored in this variable so that its easier to access it later on in the code. In simple words, uploadfile contains the reference to the file to be uploaded to the server.\n  savefile : The file name to be stored in the folder has to be unique since the same name will be stored in the database to trace down the files from the folder later. So we use {Date.now()}#${uploadfile.nameto create unique name (where uploadfile.name is the name of the file to be uploaded). Which will give us a string of 1560234246152#anyfile.txt for example. Since we add the timstamp, filename stays unique and it will be stored in savefile variable.\n  readStream/writestream : Stream is nothing but a flow of bits from one end to another end. In here, we create a read stream from user’s local computer and write stream to server’s uploads directory. We pass uploadfile.path which contains user’s local file’s path and uploads folder to write stream. That sets up the stream needed for the upload.\n  promisePipe : promisePipe is a package that takes in two streams ( read / write ) and starts reading from read file to the write file. In here, bits from the user’s local computer file will be written in streams to the uploads directory on the server with the name mentioned in the variable savefile . The best thing about promisepipe is it returns a promise. It returns a resolved response when the uploading is done or returns the rejected response when there is an error. So we can await untill the uploading is done and continue executing code thereafter, or we can use try/catch block to catch any errors while uploading and handle it.\n  By the end of execution, file will be saved in uploads folder and its name will be stored in savefile variable which can be added to the database for tracking down the files when they are requested. And if there is an error while reading or writing, it will be caught by the catch block and valid response to the front-end will be sent.\nSumming it all up Koa.js is an amazing lightweight configurable framework for Node.js. And arguably, There could be tons of better ways to achieve the same results but this turned out to be the best one for me where i can configure the functionality from the ground up. So if you know of any way to make this code better with added functionalities, I’d look forward to hear it from you. Happy coding. Have a nice day 😄\nImportant Links   Koa.js : Koa is a new web framework designed by the team behind Express, which aims to be a smaller, more expressive, and more. https://koajs.com/\n  koa-body : A Koa body parser middleware. Supports multipart, urlencoded and JSON request bodies. https://www.npmjs.com/package/koa-body\n  promisepipe : Pipe node.js streams safely with Promises. https://www.npmjs.com/package/promisepipe\n  ","permalink":"https://0xv31an5a1i5.xyz/posts/file-upload-koa-js/","summary":"I have been using Koa.js for a while now and it turns out to be great. I’m having a lot of fun playing around with it since its simple and configurable. And I was searching for a ground up way to execute file uploads so that I can tweak its functionality however I want to. And it turns out, It’s not as difficult as I thought. Before going forward, I’m assuming you have a basic knowledge of how to setup basic Koa.","title":"Simple file upload using Koa.js (or Node.js in General)"},{"content":"Docker! Sounds fancy and simple but trust me it has revolutionized how the tech industry builds, ships and deploys the applications lately. Docker is basically a mini-operating system where you build and run your applications which is totally isolated from the native operating system in your computer, and the same container can be deployed in the hosting platforms. If you are new to docker and want to learn more about its intricacies, i highly encourage you to go through the links given in the end of this article to learn more about it. So let’s get right in :)\nCreating a Dockerfile Dockerfile is the recipe of an image. Dockerfile specifies how your image should look like. However, we are not creating an image from the scratch. We will take the existing image and add our dependencies on top of that to create a customized image based on our requirements. You can setup the Dockerfile to either take the existing requirements.txt file and install dependencies from pip or install dependencies manually without requirements.txt. This is how the Dockerfile will look like in either of the situations.\n FROM python:3 RUN mkdir /usr/src/app WORKDIR /usr/src/app # Below two steps are valid only if you have # requirements.txt in the project folder COPY requirements.txt . RUN pip install -r requirements.txt # If there is no requirements.txt, # You can install individual packages as follows # RUN pip install \u0026lt;package-1\u0026gt; \u0026lt;package-2\u0026gt;...\u0026lt;package-n\u0026gt;   FROM: The image that we are building has to be built in such a way that we take an existing image and add our own functionalities to it. So we are choosing an image with python 3.x since we are dealing with Python developement. However, You can choose any image or any version you want.\n  RUN: This will run a command inside the image. Since our image is a mini linux OS (usually debian distribution) we can run linux commands inside it. Here we run mkdir /usr/src/app which creates a working directory for our application to run. Which is not absolutely necessary since its automatically created in the next step. This step was a demonstration of how to run commands inside an image.\n  WORKDIR: This specifies the working directory of our image. After setting the WORKDIR, Any RUN, CMD, ENTRYPOINT, COPY and ADD commands we execute, will be executed inside the WORKDIR . In our case, its /usr/src/app .\n  COPY: This command will copy any file specified on the left before the space to the directory specified on the right of the space. In our case, we are copying requirements.txt from our project folder on the host to our WORKDIR /usr/src/app in the image And running pip install -r requirements.txt on /usr/src/app which will install and save all the pip dependencies inside the image.\n  If there is no requirements.txt, you can skip the COPY step and install pip dependencies by specifying the pip install command in the RUN section one after the other. And save the Dockerfile with the name Dockerfile\nWe successfully created a recipe of how our image should look like, now the next step is to build the image based on this recipe.\nBuilding from the Dockerfile Now since we are done with creating our recipe, we need to build our own image from the recipe. To build the image, the command is as follows\ndocker build -t python/pack .  docker build is the command that tells docker that we need to build our own image. -t python/pack is where we add our own name for the new docker image. we can also add tags to the image using -t python/pack:latest where latest is the tag for the image. (although latest is a default tag for any new image) . tells the docker to use the current directory in lookout for Dockerfile . If the Dockerfile lies in different directory, you can specify the path from where you would want to build the Dockerfile . Once the build is finished, you will have a Customized docker image based on your recipe, and you can check it by running docker images command in the shell. You should see an image called python/pack\nCreating a Container Containers are the place where we execute our programs by mounting our local volumes to the container volumes. From where you can access the packages and dependencies installed in the container meanwhile, persisting the data to the host system. Run the following command in bash\ndocker run --rm -it \\ -u $(id -u):$(id -g) \\ -v /etc/passwd:/etc/passwd \\ -v $(pwd):/usr/src/app \\ python/pack \\ bash  This creates a container based on the image python/pack where you can accesss your project files from the directory /usr/src/app and then you can execute the code as you would do in your host machine. Lets break this command down line-by-line:\n  docker run \u0026ndash;rm -it : docker run tells the docker daemon that we want to create a new container, **-it **is where we run this container in the interactive mode. -i basically keeps the STDIN open and -t allocates a pseudo TTY. In simple words, -it is essential to open a bashshell inside the container, later. You can also use -d instead of -it which starts the container in detached mode, which starts the container in the background.\n  -u $(id -u):$(id -g) : It is not recommended to start a container as a root user. So we specify -u flag and then user ID $(id -u) and group ID $(id -g) to start a container as a regular user. Now we will have previliges over only that directory which is mounted to the container and not the entire container. This is the cleaner way of creating a container.\n  -v /etc/passwd:/etc/passwd: This -v argument mounts /etc/passwd of the host to /etc/passwd of the container. Otherwise the docker container can’t access the usernames and display I have no name! in the bash prompt. Mounting /etc/passwd solves this problem.\n  -v $(pwd):/usr/src/app: This -v argument mounts your project directory to /usr/src/app by doing which you can access your code in the project directory inside the docker container and the changes made inside the docker container will be available in the project directory (pwd prints the present working directory). So in simple words, this creates a shared space between the container and the host machine from where the host machine can access the packages and dependencies installed in the docker image.\n  python/pack: This is pretty straight-forward. This is where we mention, which image is the container will be based on. The resulting container will contain the architecture of the mentioned image.\n  bash: This is where we mention the command to be executed soon after the container is created. Since we want the bash prompt, we specify the command bash which opens a bash shell soon after the container is created.\n  By the end of this process, we will have a container which is built with the dependencies we need, sharing a same space as our project directory, totally isolated from out host machine. This is really useful since the dependencies are not installed in the host machine. The host machine only contains the project folder but it runs inside the customized container. Clean stuf !!\nExtras/Troubleshooting   Editing a Docker Image : Let’s say you have created a Docker image with 3 packages and now you want to install a new package to the already built image. You can do it by editing the imageDockerfile and running the same command docker build -t python/pack . and docker will make changes to the existing image from where the content of the Dockerfile has changed. To make these changes, it is important to note that Dockerfile is in the same folder as it was initially built. Because Docker daemon uses current Dockerfile folder as a build context and when changes to the Dockerfile is made, build context will be checked and from there the Image will be built.\n  Port Forwarding : Port forwarding is such a useful functionality inside docker container. Let’s say you are using Jupyter notebook inside your docker container and it exposes a port 8888. But it will be on the context of the container, and not on the host machine. So if you go to localhost:8888 in the host machine, it won’t work. So you map the host’s 8888 port to container’s 8888 port when creating the container and then you can access jupyter notebook by going to localhost:8888 on the host machine. You can map a port by adding -p 8888:8888 when creating the container where left side of the : is the port on the host and the right side is the port on the container.\n  Conclusion Docker is a revolutionary tech, there is no doubt about that. Once the developement is over, the developed project can be containerized and the container can be deployed in hosting platforms like Digital Ocean. Containers can be made to talk to each other and each container can be used as a microservice. The possibilities are endless. It depends on you how would use this tech to the fullest. Happy coding :)\nEssential Docker Commands  Pull Image from Dockerhub : docker pull \u0026lt;image name\u0026gt; Build a Docker Image : docker build -t \u0026lt;image name\u0026gt; \u0026lt;path\u0026gt; Create Docker Container : docker run [-it/-d] --rm -u \u0026lt;user id\u0026gt;:\u0026lt;group id\u0026gt; -v \u0026lt;host directory\u0026gt;:\u0026lt;container directory\u0026gt; -p \u0026lt;host port\u0026gt;:\u0026lt;container port\u0026gt; \u0026lt;image name\u0026gt; \u0026lt;initial command\u0026gt; List Running Container : docker ps List All Containers : docker ps -a List All Container ID\u0026rsquo;s : docker ps -aq Delete Single Container : docker rm \u0026lt;container id\u0026gt; Delete All Docker Containers : docker rm $(docker ps -aq) List all Images : docker images List all Image ID\u0026rsquo;s : docker images -aq Delete single image : docker rmi \u0026lt;image id\u0026gt; Delete all images : docker rmi $(docker images -aq) Start Interactive session with a container started in detached mode (-d) : docker exec -it \u0026lt;container_name\u0026gt; bash  Important Links   Installing Docker\n  Post Installation Steps\n  Dockerfile, full reference\n  Compose file reference\n  ","permalink":"https://0xv31an5a1i5.xyz/posts/docker-as-virtualenv/","summary":"Docker! Sounds fancy and simple but trust me it has revolutionized how the tech industry builds, ships and deploys the applications lately. Docker is basically a mini-operating system where you build and run your applications which is totally isolated from the native operating system in your computer, and the same container can be deployed in the hosting platforms. If you are new to docker and want to learn more about its intricacies, i highly encourage you to go through the links given in the end of this article to learn more about it.","title":"Docker, a replacement of Virtualenv for Python developement"},{"content":"Sounds Ridiculous! isn’t it ? Me comparing the Megabytes or Terabytes of senseless one’s and zero’s of code to something that is built with Lego bricks. Lego is supposed to be a fun process, right? But coding seems like spending too much time in front of the computer finding which semi-colon did you miss and where! And bang your head to the wall until you get it right. They’re nowhere close to a match. How is that even possible? Yeah! you might say that rather sarcastically, or had that notion in your mind all along. But trust me, this is a perfect analogy that I can put forth when it comes to the creative process of coding in its entirety. I call it Lego Coding. And it is something that you are already familiar with, but never acknowledged it for how amazing it really is.\nWhen I was 11 years old, I got my first real personal computer as my Birthday gift (The best birthday gift ever). Being a tech-geek, and being obsessed with pressing random keys in the keyboard for a mere fascination of seeing something on the monitor, coding was not my first intent. Moreover, I didn’t even know a process called ‘coding to makes wonderful things’ existed back then. I, the kid, who was building castles with Lego bricks and breaking it to build new one’s, came across coding C and C++, few years later. And it caught my attention right away. So I did what most of the budding computer geeks and beginners to the art of coding do, you guessed it,\nprintf(‘Hello My Computer, It’s your boi, Velan’);\n(I might have missed the semi colon in my first few attempts, but you get the point 😂) When I saw the output in the black screen, I was freaking out. Running around the house, shouting “My Computer knows my name”. It sounded ridiculous, yet amazing, that you can teach your computer to do things, and it just obeys you without arguing! That is how I was introduced into the art of coding. And it didn’t seem like something that is a tedious process of finding missing semi-colons, (Sometimes I do feel like banging my head against the wall, Sometimes) But It seemed more like building things that I love, with Lego bricks that I was obsessed with, prior to coding. It made me feel curious and expressive. It made me feel like, I can do anything and everything using my creative intent and my computer. And that kept me going to build things with code.\nGrowing up, I took an academic path where there is a lot of coding and computer science involved, because that is what I was interested in. It was a place of ecstasy to me, where i’m officially experimenting with things that i love doing. But, to my surprise, I was astonished to see not everyone was engrossed into the process of coding as much as I was. And when my fellow student said “I don’t like coding!”, My obvious reply was, “Are you freaking kidding me? How can you even not love playing Lego with code?”. Gradually I realised that, not everyone was introduced to coding like I had been. Not everyone coded because they loved the process, or I could say, They were never enchanted by the thought of playing Lego with code. While I saw C, C++ and other tools as Lego bricks that I can build my castles with, few others saw it as an ‘Academic-Getaway-Pass’ That can get them into introductory interviews, by showcasing good marks. And it was a let down to see an Art getting wasted, By people turning into primary job seekers than turning into primary artists who can build things they love.\nNow i’m 21 years old and, I have been coding ever since. Playing Lego with code never gets old to me. And I can’t think of any other analogy that explains the process any better. I‘m never frightened by errors popping up in my code (Trust me, I get so many of them), besides I get frightened when I don’t get one 😂. And coding has kept my childlike creativity and imagination going, and it has given me a new dimension to think about things that I would never have thought otherwise. I don’t code to save someone’s time or save this world from apocalypse or get people on mars, perhaps. I code because i’m enchanted by the mere process of coding as building something that I love, by keeping lines of code one on top of the other and create a system that is as beautiful as my Lego castle was. If my code goes on to save someone’s life or time, I’m glad it did. But my primary intent always remains to code because I love to do it. Nothing complicated. And I\u0026rsquo;ve never been tired of it, Nor will I ever be.\nIf you are someone who doesn’t like coding or someone who doesn’t know where to start coding from or if coding is not interesting to you anymore, Here’s my advice to you (I’m not a professional though. so, you have a total liberty to disagree with me 😊) Coding neither has a how-to-guide, nor a shortcut to be a coding sensei. Starting with coding is as simple as starting with it. It is an art. And art doesn’t come with guides. It is a process of learning through trial and error. If you’re coding, it is highly unlikely that you’ll get things right on the first attempt, YOU DON’T! Most of the people quit here saying, “I’m tired, Let me eat something”. But if you keep the process going, make errors, and learn from them to know where you went wrong, you will have a whole new appreciation for the process of coding as of how it shapes your logic and makes you think in a different light. And few years down the line you will probably sit in front of the computer just like me and write an article on how coding shaped your life, made you a better person, filled your life with creativity. Just in case you do, I’ll be so happy to read through your story someday.\nSo unleash the art of coding as how you build things with Lego bricks. Write code, Make mistakes, understand the errors and solve them. When you were a kid, it’s highly unlikely that you build a beautiful castle in the first attempt. Similarly it’s highly unlikely that you’ll build a world class software in your first attempt. You will gradually get better with time and practice. And it’s gonna involve a lot of error solving and experimenting. And believe me, when you make something built with code, that you can call your own, You will have a whole new appreciation for the efforts that you’ve put to get there. And that‘s what LEGO CODING does to you. It makes you be proud of yourself for the castle-like structure you have built with your Lego bricks of code. So, have fun writing code, have fun exploring fun new challenges in this world full of possibilities. Have a good day 😄\n","permalink":"https://0xv31an5a1i5.xyz/posts/lego-coding/","summary":"Sounds Ridiculous! isn’t it ? Me comparing the Megabytes or Terabytes of senseless one’s and zero’s of code to something that is built with Lego bricks. Lego is supposed to be a fun process, right? But coding seems like spending too much time in front of the computer finding which semi-colon did you miss and where! And bang your head to the wall until you get it right. They’re nowhere close to a match.","title":"Lego Coding"},{"content":"","permalink":"https://0xv31an5a1i5.xyz/elsewhere/","summary":"elsewhere","title":"Elsewhere"},{"content":"","permalink":"https://0xv31an5a1i5.xyz/uses/","summary":"uses","title":"Uses"}]